---
import Button from './Button.astro';
import { Linkedin } from 'simple-icons-astro';
import { Github } from 'simple-icons-astro';
import { Moon } from 'lucide-astro';
import { Sun } from 'lucide-astro';
import { AlignJustify } from 'lucide-astro';
---

<header
class="
 sticky top-0 z-40
 flex flex-row items-center justify-around space-y-2 max-h-16
 col-span-8 py-4 lg:flex lg:flex-row lg:justify-between lg:items-center lg:space-y-0 lg:py-0 lg:max-h-20
 border border-b-2 shadow-sm 
 ">
    <div class="lg:hidden flex flex-row space-x-4">
        <AlignJustify small-nav-button class="w-8 h-8"></AlignJustify>
        <ul id="smallNavigation" class="hidden absolute z-50 left-6 top-12 px-1 text-lg text-center bg-popover border rounded-lg  dark:border-indigo-300 dark:bg-gray-800 divide-y divide-slate-300 dark:divide-indigo-300">
            <li>
                <a id="smallNavigationHomeText" href="/">Home</a>
            </li>
            <li>
                <a id="smallNavigationManualText" href="/manual">Manual</a>
            </li>
            <li>
                <a id="smallNavigationAutomationText" href="/automation">Automation</a>
            </li>
        </ul>
    </div>
    <div id="navContainer" class="flex flex-row space-x-2 lg:flex lg:flex-row lg:space-x-4 lg:space-y-0 lg:ml-14">
            <Button  href="/">Home</Button>
            <Button  href="/manual">Manual</Button>
            <Button  href="/automation">Automation</Button>
    </div>
    <div>
        <ul class="list-none flex flex-row space-x-6 lg:mr-14">
            <div class="grid">
            <li dark-mode class="col-start-1 row-start-1">
                <button id="darkModeToggle" name="darkModeToggle" type="button">
                    <Moon dark-mode alt="Dark mode" class="hover:text-amber-500">
                </button>
            </li>
            <li light-mode class="col-start-1 row-start-1 hidden">
                <button id="lightModeToggle" name="lightModeToggle" type="button">
                    <Sun light-mode alt="Light mode" class="hover:text-amber-500 hidden">
                </button>
            </li>
            </div>
            <li>
                <a href="https://www.linkedin.com/in/piotr-gutowski-8b449b247/" target="_blank">
                    <Linkedin id="linkedDarkIcon" alt="Linkedin" class="hover:text-amber-500" />
                </a>
            </li>
            <li>
                <a href="https://github.com/pgutx" target="_blank">
                    <Github id="githubDarkIcon" alt="Github" class="hover:text-amber-500" />
                </a>
            </li>
        </ul>
    </div>
</header>

<script>
// DARK MODE TOGGLE ---------------------------------------------------------------
document.addEventListener('astro:page-load', () => {
const darkMode = document.querySelector("#darkModeToggle");
const lightMode = document.querySelector("#lightModeToggle");
const darkModeSwitch = document.querySelectorAll('[dark-mode]');
const lightModeSwitch = document.querySelectorAll('[light-mode]');

const theme = (() => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    if (theme === "light") {
      document.documentElement.classList.remove("dark");

      for(const light of lightModeSwitch){
        light.classList.add('hidden');
      }
      for(const dark of darkModeSwitch){
        dark.classList.remove('hidden');
      }

    } else {
      document.documentElement.classList.add("dark");

      for(const light of lightModeSwitch){
        light.classList.remove('hidden');
      }
      for(const dark of darkModeSwitch){
        dark.classList.add('hidden');
      }

    }

    window.localStorage.setItem("theme", theme);

    const handleToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");

      for(const light of lightModeSwitch){
        light.classList.remove('hidden');
      }
      for(const dark of darkModeSwitch){
        dark.classList.add('hidden');
      }

    };
    const lightToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");

      for(const light of lightModeSwitch){
        light.classList.add('hidden');
      }
      for(const dark of darkModeSwitch){
        dark.classList.remove('hidden');
      }

    };

    darkMode.addEventListener('click',handleToggleClick);
    lightMode.addEventListener('click',lightToggleClick);
// END -------------------------------------------------------

// Small Device Navbar
const viewportQuery = window.matchMedia("(max-width: 600px)");
const getNavCont = document.querySelector('#navContainer');

const navbar = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("navbarStorage")) {
        return localStorage.getItem("navbarStorage");
      }
    if(window.matchMedia("(max-width: 600px)").matches){
        return "small";
    }
    return "large";
});

window.localStorage.setItem("navbarStorage", navbar);

if(navbar === "small"){
    getNavCont.classList.add('hidden');
} else{
    getNavCont.classList.add('hidden');
}

viewportQuery.addEventListener("change", (event) => {
    if(event.matches) { 
        localStorage.setItem("navbarStorage", "small");
    } else {
        localStorage.setItem("navbarStorage", "large");
    }
});

const smallNavButton = document.querySelector('[small-nav-button]');
const smallNavUL = document.querySelector('#smallNavigation');

smallNavButton.addEventListener('click', () => {
    if(smallNavUL.classList.contains('hidden')){
        smallNavUL.classList.remove('hidden');
    }else {
        smallNavUL.classList.add('hidden');
    }
});
// END -------------------------------
const smallNavigationHomeText = document.querySelector('#smallNavigationHomeText');
const smallNavigationManualText = document.querySelector('#smallNavigationManualText');
const smallNavigationAutomationText = document.querySelector('#smallNavigationAutomationText');

const currentUrl = window.location.href;
/*
https://piotr-gutowski-qa.netlify.app/
https://piotr-gutowski-qa.netlify.app/manual/
https://piotr-gutowski-qa.netlify.app/automation/
*/

if(currentUrl==="http://localhost:4321/"){

  smallNavigationHomeText.classList.add('text-amber-500');

} else if(currentUrl==="http://localhost:4321/manual") {

  smallNavigationManualText.classList.add('text-amber-500');

} else if(currentUrl==="http://localhost:4321/automation") {

  smallNavigationAutomationText.classList.add('text-amber-500');

}

});


</script>

<script is:inline>
  function applyTheme() {
    localStorage.theme === 'dark'
      ? document.documentElement.classList.add("dark")
      : document.documentElement.classList.remove("dark");
  }

  document.addEventListener('astro:after-swap', applyTheme);
  applyTheme();
</script>